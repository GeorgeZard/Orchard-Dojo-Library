<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>odriverfull</Title>
      <Shortcut>odriverfull</Shortcut>
      <Description>Code snippet for ContentPart Driver with methods.</Description>
      <Author>Lombiq</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Name of the Part</ToolTip>
          <Default>MyFirst</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Name of a Property</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[public class $name$PartDriver : ContentPartDriver<$name$Part>
        {
            protected override DriverResult Display($name$Part part, string displayType, dynamic shapeHelper) => ContentShape("Parts_$name$",
              ( ) => shapeHelper.Parts_$name$());
            
            protected override DriverResult Editor($name$Part part, dynamic shapeHelper) => ContentShape("Parts_$name$_Edit",
                () => shapeHelper.EditorTemplate(
                  TemplateName: "Parts.$name$",
                  Model: part,
                  Prefix: Prefix));
            
            
            protected override DriverResult Editor($name$Part part, IUpdateModel updater, dynamic shapeHelper)
            {
                updater.TryUpdateModel(part, Prefix, null, null);
                return Editor(part, shapeHelper);
            }
            
            protected override void Exporting($name$Part part, ExportContentContext context)
            {
                var element = context.Element(part.PartDefinition.Name);
                
                element.SetAttributeValue("$property$", part.$property$);
            }
            
            protected override void Importing($name$Part part, ImportContentContext context)
            {
                var partName = part.PartDefinition.Name;
                
                context.ImportAttribute(partName, "$property$", value => part.$property$ = value);
            }
        }$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>